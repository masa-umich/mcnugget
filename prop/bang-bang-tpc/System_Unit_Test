import numpy as np
import matplotlib.pyplot as plt
import scipy.optimize as sp
import CoolProp.CoolProp as CP
from pyfluids import Fluid, FluidsList, Input
from numpy import genfromtxt

# Copy of the fuel class from Logan's chamber analysis scripts (thanks btw)
print("START OF PROGRAM")
Conductivity = genfromtxt('Conductivity.csv', delimiter=',')
Heat_Capacity = genfromtxt('Heat_Capacity.csv', delimiter=',')

# Interopolates Fuel Properties at a given temperature
# Inputs: Temperature (K)
# Outputs: Conductivity, Viscosity, Prandtl Number, Specific Heat, Density
class Fuel:
    def __init__(self, T):
        self.T = T

    @property
    def T(self):
        return self._T

    @T.setter
    def T(self, T):
        self._T = T
        self.k = np.interp(T, Conductivity[:, 0], Conductivity[:, 1])
        self.u = np.exp(2.5585 + (-3.505 / (T / 273.15)) - (3.412 * np.log(T / 273.15)) + (2.1551 * (T / 273.15)**(-3.145))) * 0.0008
        self.cp = np.interp(T, Heat_Capacity[:, 0], Heat_Capacity[:, 1])
        self.rho = 287.67 * 0.53365**(-(1 + (1 - (T / 574.262))**0.6289))

# Target tank pressure, and max pressure rate of change
P_tank = 506.889*6894.76

# Initialize baseline fluid variables
RP1 = Fuel(290)

# mdots out at T0, in kg/s
mdot_Fuel = 2.063

# vdots into tank at T0, in m^3/s
vdot_Fuel = mdot_Fuel/RP1.rho

# initial volume of gas, in m^3
V0_Ullage = (45/1000) * 0.075
V_C = 26.6/1000

# Time Step
dt = 0.000001

# Number of time steps in outer loop
N = 1000

# Number of time steps in inner loop
n = 50

# Fluid Properties
N2_F = Fluid(FluidsList.Nitrogen).with_state(Input.pressure(P_tank),Input.temperature(16.85))
Z = N2_F.compressibility
T_Ullage = N2_F.temperature + 273.15
R = N2_F.pressure/(Z * T_Ullage * N2_F.density)
N2_C = Fluid(FluidsList.Nitrogen).with_state(Input.pressure(4500*6894.76),Input.temperature(290-273.15))
entropy = N2_C.entropy
pressure_array = np.linspace(1000*6894.76,4500*6894.76,N)
mdot_array = np.zeros(N)

# Initial Fuel Mass
m_Ullage = V0_Ullage * N2_F.density
V_Ullage = V0_Ullage
e_Ullage = N2_F.internal_energy

for y in range(N):
    # previous COPV state values 
    m_C_prev = N2_C.density*V_C
    e_C_prev = N2_C.internal_energy
    E_C_prev = e_C_prev*N2_C.density*V_C

    # New COPV state
    N2_C = Fluid(FluidsList.Nitrogen).with_state(Input.pressure(pressure_array[(N-1)-y]),Input.entropy(entropy))
    m_C = N2_C.density*V_C
    e_C = N2_C.internal_energy
    E_C = e_C*N2_C.density*V_C
    #print(N2_C.temperature)

    # Calculate energy and mass change
    delta_m = m_C_prev - m_C
    delta_E = E_C_prev - E_C

    # Previous ullage state values to be used for mdot calculations
    V_Ullage_prev = V_Ullage
    E_Ullage_prev = e_Ullage*m_Ullage
    m_Ullage_prev = m_Ullage

    # Current ullage state values to be used for setting fuel ullage state
    m_Ullage = m_Ullage_prev + delta_m
    V_Ullage = V_Ullage_prev + delta_m / N2_F.density
    E_Ullage = E_Ullage_prev + delta_E  - P_tank * (V_Ullage - V_Ullage_prev)
    e_Ullage = E_Ullage/m_Ullage
    N2_F = Fluid(FluidsList.Nitrogen).with_state(Input.internal_energy(e_Ullage),Input.pressure(P_tank))

    Z = N2_F.compressibility
    for z in range(n):
        # Solve the system for the fuel tank state, x[0] is volume, x[1] is mass, x[2] is mdot,
        # x[3] is temperature, x[4] is total energy
        # With enough timesteps, this should arrive at a stable mdot value
        def state_func(x):
            return[x[0] - V_Ullage_prev - vdot_Fuel*dt,
                   x[1]*Z*R*x[3] - P_tank*x[0],
                   x[1] - m_Ullage_prev - x[2]*dt,
                   x[3]*N2_F.specific_heat*x[1] - x[4] - P_tank*x[0],
                   x[4] - E_Ullage_prev - x[2]*N2_C.enthalpy*dt + P_tank*vdot_Fuel*dt]
        fuel_state = sp.fsolve(state_func,[1,1,1,1,1])
        V_Ullage_prev = fuel_state[0]
        m_Ullage_prev = fuel_state[1]
        mdot_array[(N-1)-y] = fuel_state[2]
        T_Ullage_prev = fuel_state[3]
        E_Ullage_prev = fuel_state[4]
    
    # Area calcs and preliminary debug statements here
    print(mdot_array[(N-1)-y],N2_C.pressure/6894.76,E_Ullage+E_C,V_Ullage,m_C+m_Ullage, (N2_F.temperature + 273.15) - (N2_C.temperature + 273.15))